error_page
	400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 421 422 423 424 425 426 428 429 431
	500 501 502 503 504 505 506 507 508 509 510 511
	/error.html;

location = /error.html {
	internal;
	root /var/templates/router;
	content_by_lua_block {
		local messages = {}
		messages[400] = 'Bad Request'
		messages[401] = 'Unauthorized'
		messages[402] = 'Payment Required'
		messages[403] = 'Forbidden'
		messages[404] = 'Not Found'
		messages[405] = 'Method Not Allowed'
		messages[406] = 'Not Acceptable'
		messages[407] = 'Proxy Authentication Required'
		messages[408] = 'Request Timeout'
		messages[409] = 'Conflict'
		messages[410] = 'Gone'
		messages[411] = 'Length Required'
		messages[412] = 'Precondition Failed'
		messages[413] = 'Payload Too Large'
		messages[414] = 'URI Too Long'
		messages[415] = 'Unsupported Media Type'
		messages[416] = 'Range Not Satisfiable'
		messages[417] = 'Expectation Failed'
		messages[421] = 'Misdirected Request'
		messages[422] = 'Unprocessable Entity'
		messages[423] = 'Locked'
		messages[424] = 'Failed Dependency'
		messages[425] = 'Unordered Collection'
		messages[426] = 'Upgrade Required'
		messages[428] = 'Precondition Required'
		messages[429] = 'Too Many Requests'
		messages[431] = 'Request Header Fields Too Large'
		messages[500] = 'Internal Server Error'
		messages[501] = 'Not Implemented'
		messages[502] = 'Bad Gateway'
		messages[503] = 'Service Unavailable'
		messages[504] = 'Gateway Timeout'
		messages[505] = 'HTTP Version Not Supported'
		messages[506] = 'Variant Also Negotiates'
		messages[507] = 'Insufficient Storage'
		messages[508] = 'Loop Detected'
		messages[509] = 'Bandwidth Limit Exceeded'
		messages[510] = 'Not Extended'
		messages[511] = 'Network Authentication Required'

		local template = require "resty.template"
		local cjson = require "cjson"

		local errorMessage = (ngx.var.upstream_http_x_error_message and cjson.decode(ngx.var.upstream_http_x_error_message) or nil)
		local errorDebug = (ngx.var.upstream_http_x_error_debug and cjson.decode(ngx.var.upstream_http_x_error_debug) or nil)

		template.render("error.html", {
			error = {
				status = ngx.status,
				message = messages[ngx.status],
				description = (errorMessage or nil),
				debug = (errorDebug or nil)
			},
			actions = (ngx.var.error_actions ~= "")
		})
	}
}
