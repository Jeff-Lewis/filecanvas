#!/usr/bin/env bash

set -e

cd $(dirname $0)

if [ $(docker-machine status default) != "Running" ]; then
	docker-machine start default
fi

eval $(docker-machine env default)

# Build local docker images
./docker-build

# Tag local docker images
COMMIT_HASH=$(git rev-parse --short HEAD)
if [[ -n $(git status -s) ]]; then COMMIT_HASH=$COMMIT_HASH-dev; fi
docker tag -f filecanvas/app filecanvas/app:$COMMIT_HASH
docker tag -f filecanvas/router filecanvas/router:$COMMIT_HASH

# Prepare the deploy artifact
rm -rf .tmp/deploy
mkdir -p .tmp/deploy
rsync -a -v -L --delete --exclude '.*' .ebextensions/ .tmp/deploy/.ebextensions
if [ "$DOCKER_REGISTRY" ]; then
	REGISTRY_REPLACEMENT=$DOCKER_REGISTRY'\/'
else
	REGISTRY_REPLACEMENT=
fi
sed -e 's/filecanvas\/\([[:alpha:]]*\):latest/'$REGISTRY_REPLACEMENT'filecanvas\/\1:'$COMMIT_HASH'/' ./Dockerrun.aws.json > .tmp/deploy/Dockerrun.aws.json

# Build client-side assets
export NODE_ENV=production
npm run postinstall

# Copy admin assets into artifact bundle
mkdir -p .tmp/deploy/templates/admin/assets
rsync -a -v -L --delete --exclude '.*' ./templates/admin/assets/ .tmp/deploy/templates/admin/assets

# Copy theme assets into artifact bundle
mkdir -p .tmp/deploy/themes
rsync -a -v -L --delete --exclude '.*' ./themes/ .tmp/deploy/themes

# Pack the deploy artifact
(cd .tmp/deploy; zip -FSr ../app.zip * .[^.]*)
